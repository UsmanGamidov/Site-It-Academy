/* eslint-disable no-unused-vars */
import nodemailer from "nodemailer";
import UserModel from "../models/User.js";
import VerificationCodeModel from "../models/VerificationCode.js";
import bcrypt from "bcrypt";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ email
export const checkEmail = async (req, res) => {
  try {
    const user = await UserModel.findOne({ email: req.body.email });
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ exists: true });
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email" });
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email
// üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const sendCodeRegister = async (req, res) => {
  const { email } = req.body;

  // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ email —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—à–∏–±–∫–∞
  const existingUser = await UserModel.findOne({ email });
  if (existingUser) {
    return res
      .status(400)
      .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
  }

  const code = Math.floor(100000 + Math.random() * 900000).toString();

  await VerificationCodeModel.findOneAndUpdate(
    { email },
    { code, createdAt: new Date() },
    { upsert: true, new: true }
  );

  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: "osmangamidov026@gmail.com",
      pass: "jkra cjsu njhk hcjl",
    },
  });

  await transporter.sendMail({
    from: '"IT Academy" <osmangamidov026@gmail.com>',
    to: email,
    subject: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)",
    text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`,
  });

  res.json({ message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email" });
};

// üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
export const sendCodeReset = async (req, res) => {
  const { email } = req.body;

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –æ—à–∏–±–∫–∞
  const user = await UserModel.findOne({ email });
  if (!user) {
    return res
      .status(404)
      .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  const code = Math.floor(100000 + Math.random() * 900000).toString();

  await VerificationCodeModel.findOneAndUpdate(
    { email },
    { code, createdAt: new Date() },
    { upsert: true, new: true }
  );

  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: "osmangamidov026@gmail.com",
      pass: "jkra cjsu njhk hcjl",
    },
  });

  await transporter.sendMail({
    from: '"IT Academy" <osmangamidov026@gmail.com>',
    to: email,
    subject: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è)",
    text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`,
  });

  res.json({ message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email" });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
export const verifyCode = async (req, res) => {
  const { email, code } = req.body;

  if (!email || !code) {
    return res.status(400).json({ message: "Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    const record = await VerificationCodeModel.findOne({ email });
    if (!record || record.code !== code) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
    }

    res.json({ message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞" });
  }
};

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
export const resetPassword = async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await UserModel.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const salt = await bcrypt.genSalt(10);
    const passwordHash = await bcrypt.hash(password, salt);

    await UserModel.updateOne({ email }, { passwordHash });

    res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è" });
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—É—Ä—Å
export const sendMail = async (req, res) => {
  const { fullName, email, phone, title } = req.body;

  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: "osmangamidov026@gmail.com",
      pass: "jkra cjsu njhk hcjl",
    },
  });

  const adminMailOptions = {
    from: `"–°–∞–π—Ç –ö—É—Ä—Å–æ–≤ IT-Acadremy" <osmangamidov026@gmail.com>`,
    to: "osmangamidov025@gmail.com",
    subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å: ${title}`,
    text: `–§–ò–û: ${fullName}\nEmail: ${email}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–ö—É—Ä—Å: ${title}`,
  };

  const userMailOptions = {
    from: `"–°–∞–π—Ç –ö—É—Ä—Å–æ–≤ IT-Acadremy" <osmangamidov026@gmail.com>`,
    to: email,
    subject: `–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫—É—Ä—Å: ${title}`,
    text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${fullName}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å "${title}". –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.\n\n–°–ø–∞—Å–∏–±–æ!\n\n–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: ${phone}`,
  };

  try {
    await transporter.sendMail(adminMailOptions);
    await transporter.sendMail(userMailOptions);
    res.status(200).json({ message: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞" });
  }
};
